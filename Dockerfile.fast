# Multi-stage Dockerfile optimized for fast builds and caching
# Build time: ~3-5 minutes (vs 45 minutes)

# Stage 1: Base dependencies (cached layer)
FROM python:3.11-slim AS base-deps

# Install system dependencies in one layer
RUN apt-get update && apt-get install -y \
    gcc g++ \
    curl wget \
    git \
    build-essential \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Stage 2: Python dependencies (heavily cached)
FROM base-deps AS python-deps

WORKDIR /app
COPY requirements.txt .

# Install Python packages with caching
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Stage 3: Model cache (separate layer for model downloads)
FROM python-deps AS model-cache

# Copy local BGE-M3 model to avoid network downloads
COPY bge-m3_repo/ /app/bge-m3_repo/

# Copy model caching script
COPY cache_model.py /tmp/cache_model.py

# Setup local model (no network required)
RUN python /tmp/cache_model.py && rm /tmp/cache_model.py

# Stage 4: Development (for fast iteration)
FROM model-cache AS development

WORKDIR /app
COPY . .

# Create necessary directories
RUN mkdir -p /app/app/indexes /app/backups /app/data

# Set proper permissions
RUN chmod +x /app/startup.sh 2>/dev/null || echo "startup.sh not found, continuing..."

CMD ["python", "-m", "app.api_new"]

# Stage 5: Production (optimized final image)
FROM model-cache AS production

WORKDIR /app

# Copy only necessary files
COPY app/ ./app/
COPY startup.sh* ./
COPY requirements.txt .

# Create necessary directories
RUN mkdir -p /app/app/indexes /app/backups /app/data

# Set proper permissions
RUN chmod +x /app/startup.sh 2>/dev/null || echo "startup.sh not found, continuing..."

# Optimize Python
ENV PYTHONOPTIMIZE=1
ENV PYTHONDONTWRITEBYTECODE=1

CMD ["python", "-m", "app.api_new"]

# Build cache tags for faster subsequent builds
LABEL cache.stage.base-deps="true"
LABEL cache.stage.python-deps="true" 
LABEL cache.stage.model-cache="true"
